name: Test, Build And Release JASM

on:
  workflow_dispatch:
  pull_request:
    branches: [ main ]
    paths:
      - 'src/**'
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'CHANGELOG.md'

jobs:
  format:
    runs-on: windows-latest
    defaults:
      run:
        working-directory: ./src

    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.x
  
    - name: Restore dependencies
      run: dotnet restore
  
    - name: Format
      run: dotnet format --verify-no-changes

  build:
    needs: format
    strategy:
      matrix:
        configuration: [Release]
        platform: [x64]
        build_type: [Regular, SelfContained]

    runs-on: windows-latest
    outputs:
      release_flag: ${{ steps.set_output.outputs.release_flag }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.x

    - name: Test
      run: dotnet test ${{ github.workspace }}\src

    - name: Build, publish and zip the app
      run: |
        python ${{ github.workspace }}\Build\Release.py ${{ matrix.build_type == 'SelfContained' && 'SelfContained' || '' }} ExcludeElevator
        echo "zipFile=JASM_v${{ github.ref }}_${{ matrix.build_type }}.7z" >> $GITHUB_ENV

    - name: List build directory
      run: dir ${{ github.workspace }}

    - name: Upload JASM
      uses: actions/upload-artifact@v4
      with:
        name: JASM_${{ matrix.build_type }}
        path: ${{ github.workspace }}\\${{ env.zipFile }}
        
    - name: Set release flag output
      id: set_output
      run: |
        $message = "${{ github.event.head_commit.message }}"
        if ($message -like "chore(main): release*") {
          echo "::set-output name=release_flag::true"
        } else {
          echo "::set-output name=release_flag::false"
        }

  release:
    needs: build
    if: needs.build.outputs.release_flag == 'true'
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
    
      - name: Download regular version build artifact
        uses: actions/download-artifact@v3
        with:
          name: JASM_Regular
    
      - name: Download self-contained version build artifact
        uses: actions/download-artifact@v3
        with:
          name: JASM_SelfContained

      - name: Get version
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        shell: bash

      - name: Get latest release upload URL
        id: get_release
        run: |
          $response = Invoke-RestMethod -Uri "https://api.github.com/repos/${{ github.repository }}/releases/latest" -Headers @{Authorization = "token ${{ secrets.GITHUB_TOKEN }}"}
          $uploadUrl = $response.upload_url -replace '{?name,label}', ''
          echo "UPLOAD_URL=$uploadUrl" >> $env:GITHUB_ENV

      - name: Upload regular version release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: ./JASM_v${{ steps.get_version.outputs.VERSION }}.7z
          asset_name: JASM_v${{ steps.get_version.outputs.VERSION }}.7z
          asset_content_type: application/x-7z-compressed
    
      - name: Upload self-contained version release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: ./SelfContained_JASM_v${{ steps.get_version.outputs.VERSION }}.7z
          asset_name: SelfContained_JASM_v${{ steps.get_version.outputs.VERSION }}.7z
          asset_content_type: application/x-7z-compressed
